name: Build Windows
description: Build Windows
inputs:
  mono:
    description: Build with mono
    type: bool
    default: false
    required: true
runs:
  using: "composite"
  steps:
    - name: Out cache Windows
      uses: actions/cache@v4
      id: out-cache
      with:
        path: redot-engine/out/windows
        key: out-windows-${{env.REDOT_BASE_VERSION}}
        restore-keys: |
          out-windows-${{env.REDOT_BASE_VERSION}}

    - name: Create source cache
      id: windows-deps-cache
      uses: actions/cache@v4
      with:
        path: |
          redot-engine/deps/angle
          redot-engine/deps/mesa
        key: windows-deps-${{env.REDOT_BASE_VERSION}}
        restore-keys: |
          windows-deps-${{env.REDOT_BASE_VERSION}}

    - name: Check DX SDK
      id: check-dx
      if: steps.windows-deps-cache.outputs.cache-hit != 'true'
      working-directory: redot-engine
      shell: bash
      run: |
        # Windows and macOS need ANGLE
        if [ ! -d "deps/angle" ]; then
          echo "Missing ANGLE libraries, downloading them."
          mkdir -p deps/angle
          pushd deps/angle
          base_url=https://github.com/godotengine/godot-angle-static/releases/download/chromium%2F6601.2/godot-angle-static
          curl -L -o windows_arm64.zip $base_url-arm64-llvm-release.zip
          curl -L -o windows_x86_64.zip $base_url-x86_64-gcc-release.zip
          curl -L -o windows_x86_32.zip $base_url-x86_32-gcc-release.zip
          curl -L -o macos_arm64.zip $base_url-arm64-macos-release.zip
          curl -L -o macos_x86_64.zip $base_url-x86_64-macos-release.zip
          unzip -o windows_arm64.zip && rm -f windows_arm64.zip
          unzip -o windows_x86_64.zip && rm -f windows_x86_64.zip
          unzip -o windows_x86_32.zip && rm -f windows_x86_32.zip
          unzip -o macos_arm64.zip && rm -f macos_arm64.zip
          unzip -o macos_x86_64.zip && rm -f macos_x86_64.zip
          popd
        fi
        
        if [ ! -d "deps/mesa" ]; then
          echo "Missing Mesa/NIR libraries, downloading them."
          mkdir -p deps/mesa
          pushd deps/mesa
          curl -L -o mesa_arm64.zip https://github.com/godotengine/godot-nir-static/releases/download/23.1.9-1/godot-nir-static-arm64-llvm-release.zip
          curl -L -o mesa_x86_64.zip https://github.com/godotengine/godot-nir-static/releases/download/23.1.9-1/godot-nir-static-x86_64-gcc-release.zip
          curl -L -o mesa_x86_32.zip https://github.com/godotengine/godot-nir-static/releases/download/23.1.9-1/godot-nir-static-x86_32-gcc-release.zip
          unzip -o mesa_arm64.zip && rm -f mesa_arm64.zip
          unzip -o mesa_x86_64.zip && rm -f mesa_x86_64.zip
          unzip -o mesa_x86_32.zip && rm -f mesa_x86_32.zip
          popd
        fi

    - name: Build Windows
      if: inputs.mono != true && steps.out-cache.outputs.cache-hit != 'true'
      working-directory: redot-engine
      shell: bash
      run: |
        echo "Starting classical build for Windows..."
                
        $SCONS platform=windows arch=x86_64 $OPTIONS target=editor
        mkdir -p out/windows/x86_64/tools
        cp -rvp bin/* out/windows/x86_64/tools
        rm -rf bin
      
        $SCONS platform=windows arch=x86_64 $OPTIONS target=template_debug
        $SCONS platform=windows arch=x86_64 $OPTIONS target=template_release
        mkdir -p out/windows/x86_64/templates
        cp -rvp bin/* out/windows/x86_64/templates
        rm -rf bin
      
        $SCONS platform=windows arch=x86_32 $OPTIONS target=editor
        mkdir -p out/windows/x86_32/tools
        cp -rvp bin/* out/windows/x86_32/tools
        rm -rf bin
      
        $SCONS platform=windows arch=x86_32 $OPTIONS target=template_debug
        $SCONS platform=windows arch=x86_32 $OPTIONS target=template_release
        mkdir -p out/windows/x86_32/templates
        cp -rvp bin/* out/windows/x86_32/templates
        rm -rf bin
      
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_LLVM target=editor
        mkdir -p out/windows/arm64/tools
        cp -rvp bin/* out/windows/arm64/tools
        rm -rf bin
      
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_LLVM target=template_debug
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_LLVM target=template_release
        mkdir -p out/windows/arm64/templates
        cp -rvp bin/* out/windows/arm64/templates
        rm -rf bin
      
        if [ "${STEAM}" == "1" ]; then
          build_name=${BUILD_NAME}
          export BUILD_NAME="steam"
          $SCONS platform=windows arch=x86_64 $OPTIONS target=editor steamapi=yes
          $SCONS platform=windows arch=x86_32 $OPTIONS target=editor steamapi=yes
          mkdir -p out/windows/steam
          cp -rvp bin/* out/windows/steam
          rm -rf bin
          export BUILD_NAME=${build_name}
        fi

    - name: Build Windows Mono
      if: inputs.mono != false && steps.out-cache.outputs.cache-hit != 'true'
      working-directory: redot-engine
      shell: bash
      run: |
        echo "Starting Mono build for Windows..."
      
        cp -r mono-glue/GodotSharp/GodotSharp/Generated modules/mono/glue/GodotSharp/GodotSharp/
        cp -r mono-glue/GodotSharp/GodotSharpEditor/Generated modules/mono/glue/GodotSharp/GodotSharpEditor/
      
        $SCONS platform=windows arch=x86_64 $OPTIONS $OPTIONS_MONO target=editor
        ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows
        mkdir -p out/windows/x86_64/tools-mono
        cp -rvp bin/* out/windows/x86_64/tools-mono
        rm -rf bin
      
        $SCONS platform=windows arch=x86_64 $OPTIONS $OPTIONS_MONO target=template_debug
        $SCONS platform=windows arch=x86_64 $OPTIONS $OPTIONS_MONO target=template_release
        mkdir -p out/windows/x86_64/templates-mono
        cp -rvp bin/* out/windows/x86_64/templates-mono
        rm -rf bin
      
        $SCONS platform=windows arch=x86_32 $OPTIONS $OPTIONS_MONO target=editor
        ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows
        mkdir -p out/windows/x86_32/tools-mono
        cp -rvp bin/* out/windows/x86_32/tools-mono
        rm -rf bin
      
        $SCONS platform=windows arch=x86_32 $OPTIONS $OPTIONS_MONO target=template_debug
        $SCONS platform=windows arch=x86_32 $OPTIONS $OPTIONS_MONO target=template_release
        mkdir -p out/windows/x86_32/templates-mono
        cp -rvp bin/* out/windows/x86_32/templates-mono
        rm -rf bin
      
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_MONO $OPTIONS_LLVM target=editor
        ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows
        mkdir -p out/windows/arm64/tools-mono
        cp -rvp bin/* out/windows/arm64/tools-mono
        rm -rf bin
      
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_MONO $OPTIONS_LLVM target=template_debug
        $SCONS platform=windows arch=arm64 $OPTIONS $OPTIONS_MONO $OPTIONS_LLVM target=template_release
        mkdir -p out/windows/arm64/templates-mono
        cp -rvp bin/* out/windows/arm64/templates-mono
        rm -rf bin

    - name: Out cache windows save
      uses: actions/cache/save@v4
      id: out-cache-save
      with:
        path: redot-engine/out/windows
        key: out-windows-${{env.REDOT_BASE_VERSION}}
